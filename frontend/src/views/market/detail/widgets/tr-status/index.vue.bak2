<template>
  <div class="tr-status-detail">
    <div class="header-section">
      <div class="title-area">
        <h2>Transmission下载器状态</h2>
        <p class="description">实时监控Transmission下载器状态，支持多个下载器和自定义显示项</p>
      </div>
      <div class="actions">
        <el-button @click="showHelpDialog" type="info" icon="QuestionFilled">使用指南</el-button>
        <el-button @click="handleReset" type="danger">重置参数</el-button>
      </div>
    </div>
    
    <!-- 支持作者信息 -->
    <div class="support-author">
      <div class="support-text">
        <span>✨ TR组件开发不易，感谢各位大佬的支持和使用~ </span>
        <span class="highlight">喜欢的话，可以点击左下角「支持作者」按钮，给予一点点鼓励呀！💝</span>
      </div>
    </div>

    <div class="main-content">
      <!-- 左侧 - Transmission下载器列表 -->
      <el-card class="tr-list-section" shadow="hover">
        <template #header>
          <div class="section-title">
            <span>Transmission下载器列表</span>
            <el-button type="primary" size="small" @click="addNewTR">添加下载器</el-button>
          </div>
        </template>
        <div class="tr-list">
          <div 
            v-for="(tr, index) in trList" 
            :key="tr.id" 
            class="tr-item"
            :class="{ active: currentTRIndex === index }"
            @click="selectTR(index)"
          >
            <div class="tr-item-content">
              <div class="tr-item-name">{{ tr.name }}</div>
              <div class="tr-item-status" :class="{ valid: tr.isConfigValid }">
                {{ tr.isConfigValid ? '已验证' : '未验证' }}
              </div>
            </div>
            <div class="tr-item-actions">
              <el-button 
                type="danger" 
                size="small" 
                circle 
                @click.stop="removeTR(index)"
              >
                <el-icon><Delete /></el-icon>
              </el-button>
            </div>
          </div>
          <div v-if="trList.length === 0" class="no-tr">
            <el-empty description="暂无下载器配置" />
          </div>
        </div>
      </el-card>

      <div class="right-section">
        <!-- 域名前缀设置 -->
        <el-card class="domain-prefix-section" shadow="hover">
          <template #header>
            <div class="section-title">
              <span>全局设置</span>
            </div>
          </template>
          <div class="domain-prefix-content">
            <el-form-item label="域名前缀 (全局设置)">
              <el-input 
                v-model="domainPrefix" 
                placeholder="例如: https://your-domain.com" 
              />
              <div class="form-tip">此为全局设置，所有组件共享同一域名前缀，仅需设置一次</div>
            </el-form-item>
          </div>
        </el-card>

        <!-- 中间 - 参数配置和预览 -->
        <el-tabs type="border-card" class="config-preview-tabs">
          <el-tab-pane label="参数配置">
            <div class="params-content">
              <Params 
                v-if="currentTR" 
                v-model="currentTR" 
                @test-connection="testConnection" 
                @save-config="saveConfig"
                @apply-to-fixed="applyToFixed"
                @apply-to-free="applyToFree"
              />
              <div v-else class="no-tr-selected">
                <el-empty description="请选择或添加一个Transmission下载器" />
              </div>
            </div>
          </el-tab-pane>
          <el-tab-pane label="预览效果">
            <div class="preview-header" v-if="currentTR && currentTR.isConfigValid">
              <div class="preview-tips">
                <el-alert
                  type="info"
                  :closable="false"
                  show-icon
                >
                  <p>预览区域为响应式布局，实际部署后会根据最终部署环境自动调整大小和布局</p>
                </el-alert>
              </div>
              <el-button 
                type="primary" 
                size="small" 
                @click="refreshPreview"
              >
                刷新预览
              </el-button>
            </div>
            <div class="preview-content">
              <div v-if="currentTR && currentTR.isConfigValid" class="iframe-preview">
                <div class="gradient-bg"></div>
                <iframe 
                  :src="widgetUrl" 
                  frameborder="0" 
                  width="100%" 
                  height="300"
                  @load="iframeLoaded = true"
                ></iframe>
                <div v-if="!iframeLoaded" class="iframe-loading">
                  <el-icon class="is-loading"><Loading /></el-icon>
                  <span>加载预览中...</span>
                </div>
              </div>
              <Preview 
                v-else-if="currentTR" 
                :preview-data="previewData" 
                :display-items="currentTR.displayItems"
              />
              <div v-else class="no-preview">
                <el-empty description="请先配置Transmission下载器" />
              </div>
            </div>
          </el-tab-pane>
        </el-tabs>
      </div>
    </div>

    <!-- 使用帮助对话框组件 -->
    <HelpDialog v-model:visible="helpDialogVisible" />
  </div>
</template>

<script setup lang="ts">
import { ref, computed, onMounted, watch } from 'vue'
import { ElMessage, ElMessageBox } from 'element-plus'
import { Delete, Loading } from '@element-plus/icons-vue'
import axios from 'axios'
import request from '@/utils/request'
import Params from './params.vue'
import Preview from './preview.vue'
import HelpDialog from './help-dialog.vue'
import { TRConfig, TRStatusData, TRService } from './tr-service'

// 定义接口类型
interface PoolResponse {
  code: number
  message: string
  data: {
    widgets: any[]
  }
}

interface FreeResponse {
  code: number
  message: string
  data?: any
}

// 定义接口
interface SaveConfigResponse {
  success: boolean
  id?: string
  error?: string
}

interface ComponentPoolItem {
  type: string
  title: string
  name: string
  url?: string
  config: any
  source?: string
  [key: string]: any
}

interface ApiResponse<T> {
  code: number
  message: string
  data: T
}

interface PoolData {
  widgets: ComponentPoolItem[]
  [key: string]: any
}

// 域名前缀
const domainPrefix = ref('')

// 监听域名前缀变化，更新当前TR配置
watch(domainPrefix, (newPrefix) => {
  if (currentTR.value) {
    currentTR.value.domainPrefix = newPrefix
    saveTRList()
  }
})

// TR下载器列表
const trList = ref<TRConfig[]>([])
// 当前选中的TR下载器索引
const currentTRIndex = ref(-1)
// 预览数据
const previewData = ref<TRStatusData>({
  name: '',
  isOnline: false,
  downloadSpeed: 0,
  uploadSpeed: 0,
  activeTorrents: 0,
  pausedTorrents: 0,
  completedTorrents: 0,
  totalTorrents: 0,
  activeDownloads: 0,
  globalRatio: 0,
  globalDownloaded: 0,
  globalUploaded: 0,
  freeSpace: 0,
  seedingTorrents: 0,
  totalSize: 0,
  averageRatio: 0,
  errorTorrents: 0,
  uploadLimit: 0,
  downloadLimit: 0
})

// 帮助对话框可见性
const helpDialogVisible = ref(false)
// iframe加载状态
const iframeLoaded = ref(false)

// 当前选中的TR下载器
const currentTR = computed(() => {
  if (currentTRIndex.value >= 0 && currentTRIndex.value < trList.value.length) {
    return trList.value[currentTRIndex.value]
  }
  return null
})

// 预览URL
const widgetUrl = computed(() => {
  if (!currentTR.value) return ''
  return TRService.generateWidgetUrl(currentTR.value)
})

// 显示帮助对话框
const showHelpDialog = () => {
  helpDialogVisible.value = true
}

// 添加新的TR下载器
const addNewTR = () => {
  const newTR = TRService.createDefaultConfig()
  // 设置域名前缀
  newTR.domainPrefix = domainPrefix.value
  trList.value.push(newTR)
  currentTRIndex.value = trList.value.length - 1
  saveTRList()
}

// 选择TR下载器
const selectTR = (index: number) => {
  currentTRIndex.value = index
}

// 移除TR下载器
const removeTR = (index: number) => {
  ElMessageBox.confirm(
    '确定要删除这个Transmission下载器吗？',
    '删除确认',
    {
      confirmButtonText: '确定',
      cancelButtonText: '取消',
      type: 'warning'
    }
  ).then(() => {
    trList.value.splice(index, 1)
    if (currentTRIndex.value === index) {
      currentTRIndex.value = trList.value.length > 0 ? 0 : -1
    } else if (currentTRIndex.value > index) {
      currentTRIndex.value--
    }
    saveTRList()
    ElMessage.success('删除成功')
  }).catch(() => {
    // 取消删除
  })
}

// 重置参数
const handleReset = () => {
  ElMessageBox.confirm(
    '确定要重置所有参数吗？这将删除所有已配置的下载器。',
    '重置确认',
    {
      confirmButtonText: '确定',
      cancelButtonText: '取消',
      type: 'warning'
    }
  ).then(() => {
    trList.value = []
    currentTRIndex.value = -1
    saveTRList()
    ElMessage.success('参数已重置')
  }).catch(() => {
    // 取消重置
  })
}

// 测试连接
const testConnection = async () => {
  if (!currentTR.value) return
  
  try {
    ElMessage.info('正在测试连接...')
    
    const isConnected = await TRService.testConnection(
      currentTR.value.url,
      currentTR.value.username,
      currentTR.value.password
    )
    
    if (isConnected.success) {
      currentTR.value.isConfigValid = true
      currentTR.value.lastTested = Date.now()
      saveTRList()
      
      // 获取状态数据用于预览
      if (currentTR.value.id) {
        const statusData = await TRService.getStatus(currentTR.value.id)
        if (statusData) {
          previewData.value = statusData
        }
      }
      
      ElMessage.success('连接测试成功')
    } else {
      currentTR.value.isConfigValid = false
      saveTRList()
      ElMessage.error(`连接测试失败: ${isConnected.message || '未知错误'}`)
    }
  } catch (error) {
    console.error('测试连接错误:', error)
    currentTR.value.isConfigValid = false
    saveTRList()
    ElMessage.error('连接测试失败: ' + (error instanceof Error ? error.message : '未知错误'))
  }
}

// 保存配置
const saveConfig = async () => {
  if (!currentTR.value) {
    ElMessage.warning('请先选择或添加一个Transmission下载器')
    return
  }
  
  if (!currentTR.value.isConfigValid) {
    ElMessage.warning('请先测试连接，确保配置有效')
    return
  }
  
  try {
    console.log('准备保存配置:', JSON.stringify(currentTR.value));
    
    // 确保displayItems包含所有必要的字段
    const allItems = [
      'downloadSpeed', 'uploadSpeed', 'activeDownloads', 'activeTorrents',
      'pausedTorrents', 'completedTorrents', 'totalTorrents', 'errorTorrents',
      'seedingTorrents', 'globalRatio', 'averageRatio',
      'globalDownloaded', 'globalUploaded', 'uploadLimit', 'downloadLimit',
      'freeSpace', 'totalSize'
    ];
    
    // 此时我们已经确认currentTR.value不为null
    const config = currentTR.value;
    
    if (!config.displayItems) {
      config.displayItems = {
        downloadSpeed: true,
        uploadSpeed: true,
        activeDownloads: true,
        activeTorrents: true,
        pausedTorrents: true,
        completedTorrents: true,
        totalTorrents: true,
        globalRatio: true,
        globalDownloaded: true,
        globalUploaded: true,
        freeSpace: true,
        seedingTorrents: true,
        totalSize: true,
        averageRatio: true,
        errorTorrents: true,
        uploadLimit: true,
        downloadLimit: true
      };
    } else {
      // 确保所有字段都存在，但不改变现有值
      allItems.forEach(item => {
        if (config.displayItems[item] === undefined) {
          console.log(`配置中缺少${item}项，设置为默认值false`);
          config.displayItems[item] = false;
        }
      });
    }
    
    // 确保displayOrder字段存在且只包含用户选择的项目
    if (!config.displayOrder || !Array.isArray(config.displayOrder)) {
      console.log('创建默认的displayOrder字段');
      // 只包含已勾选的项目
      config.displayOrder = Object.keys(config.displayItems)
        .filter(key => config.displayItems[key] === true);
    } else {
      // 只保留用户选择的显示项
      config.displayOrder = config.displayOrder.filter(item => 
        config.displayItems[item] === true
      );
    }
    
    console.log('保存前的最终配置:', JSON.stringify(config));
    
    // 使用TRService保存配置
    const saveResult = await TRService.saveConfig(config)
    
    if (!saveResult) {
      throw new Error('保存配置到服务器失败')
    }
    
    // 更新当前配置
    if (saveResult.id) {
      config.id = saveResult.id
    }
    
    // 保存到本地列表
    saveTRList()
    
    // 获取状态数据用于预览
    if (config.id) {
      const statusData = await TRService.getStatus(config.id)
      
      // 更新预览数据
      if (statusData) {
        previewData.value = statusData
      }
    }
    
    ElMessage.success('配置已保存')
  } catch (error) {
    console.error('保存配置出错:', error)
    ElMessage.error('保存配置出错: ' + (error instanceof Error ? error.message : String(error)))
  }
}

// 应用到固定组件
const applyToFixed = async () => {
  if (!currentTR.value || !currentTR.value.isConfigValid) {
    ElMessage.warning('请先测试连接，确保配置有效')
    return
  }
  
  try {
    // 使用TRService保存配置
    await TRService.getStatus(currentTR.value.id) // 这会验证配置是否有效
    
    // 生成组件URL
    const widgetUrl = TRService.generateWidgetUrl(currentTR.value)
    
    // 获取当前固定组件池
    try {
      const response = await axios.get('/api/fixed/pool')
      
      console.log('获取到的固定组件池:', response)
      
      const poolData = (response.data as PoolResponse).data || { widgets: [] }
      const poolWidgets = poolData.widgets || []
      
      // 检查是否已存在相同URL的TR下载器组件（通过URL中的ID判断）
      const existingWidget = poolWidgets.find((w: any) => 
        w.url && w.url.includes(`id=${currentTR.value?.id}`)
      )
      
      // 检查是否存在同名但不同ID的组件
      const sameNameWidget = poolWidgets.find((w: any) => 
        w.name === currentTR.value?.name && 
        (!w.url || !w.url.includes(`id=${currentTR.value?.id}`))
      )
      
      try {
        // 如果存在同名但不同ID的组件，先删除它
        if (sameNameWidget) {
          console.log('删除同名组件:', sameNameWidget)
          await axios.post('/api/fixed/pool', {
            action: 'remove',
            name: sameNameWidget.name
          })
        }
        
        if (existingWidget) {
          console.log('更新已存在的组件:', existingWidget)
          
          // 如果存在，则更新该组件的配置
          const updateResponse = await axios.post('/api/fixed/pool', {
            action: 'update',
            name: existingWidget.name,
            widget: {
              id: existingWidget.id,
              name: currentTR.value.name,
              url: widgetUrl,
              type: 'widget',
              source: 'market',
              width: 500,
              height: 300,
              mobileShow: true
            }
          })
          
          console.log('更新组件响应:', updateResponse)
          ElMessage.success('已更新固定组件')
        } else {
          // 如果不存在，则添加新组件
          const newWidget = {
            id: Date.now().toString(),
            name: currentTR.value.name,
            url: widgetUrl,
            type: 'widget',
            source: 'market',
            width: 500,
            height: 300,
            mobileShow: true
          }
          
          console.log('添加新组件:', newWidget)
          
          const addResponse = await axios.post('/api/fixed/pool', {
            action: 'add',
            widget: newWidget
          })
          
          console.log('添加组件响应:', addResponse)
          ElMessage.success('已添加到固定组件')
        }
        
        // 标记为已应用
        currentTR.value.isAppliedToFixed = true
        saveTRList()
      } catch (apiError: any) {
        console.error('API请求错误:', apiError)
        
        // 尝试获取详细错误信息
        let errorMessage = '未知错误'
        if (apiError.response && apiError.response.data) {
          errorMessage = apiError.response.data.message || apiError.response.data.error || '未知错误'
        } else if (apiError.message) {
          errorMessage = apiError.message
        }
        
        ElMessage.error(`应用到固定组件失败: ${errorMessage}`)
      }
    } catch (poolError: any) {
      console.error('获取组件池失败:', poolError)
      ElMessage.error('获取组件池失败: ' + (poolError.message || '未知错误'))
    }
  } catch (error) {
    console.error('应用到固定组件出错:', error)
    ElMessage.error('应用到固定组件出错: ' + (error instanceof Error ? error.message : String(error)))
  }
}

// 应用到自由组件
const applyToFree = async () => {
  if (!currentTR.value || !currentTR.value.isConfigValid) {
    ElMessage.warning('请先测试连接，确保配置有效')
    return
  }
  
  try {
    // 使用TRService保存配置
    await TRService.getStatus(currentTR.value.id) // 这会验证配置是否有效
    
    // 生成组件URL
    const widgetUrl = TRService.generateWidgetUrl(currentTR.value)
    
    try {
      // 获取当前自由组件池
      const response = await axios.get('/api/free/pool')
      
      console.log('获取到的自由组件池:', response)
      
      const poolData = (response.data as PoolResponse).data || { widgets: [] }
      const poolWidgets = poolData.widgets || []
      
      // 检查是否已存在相同URL的TR下载器组件（通过URL中的ID判断）
      const existingWidget = poolWidgets.find((w: any) => 
        w.url && w.url.includes(`id=${currentTR.value?.id}`)
      )
      
      // 检查是否存在同名但不同ID的组件
      const sameNameWidget = poolWidgets.find((w: any) => 
        w.name === currentTR.value?.name && 
        (!w.url || !w.url.includes(`id=${currentTR.value?.id}`))
      )
      
      try {
        // 如果存在同名但不同ID的组件，先删除它
        if (sameNameWidget) {
          console.log('删除同名组件:', sameNameWidget)
          await axios.post('/api/free/pool', {
            action: 'remove',
            name: sameNameWidget.name
          })
        }
        
        if (existingWidget) {
          console.log('更新已存在的组件:', existingWidget)
          
          // 如果存在，则更新该组件的配置
          const updateResponse = await axios.post('/api/free/pool', {
            action: 'update',
            name: existingWidget.name,
            widget: {
              id: existingWidget.id,
              name: currentTR.value.name,
              url: widgetUrl,
              source: 'market'
            }
          })
          
          console.log('更新组件响应:', updateResponse)
          ElMessage.success('已更新自由组件')
        } else {
          // 如果不存在，则添加新组件
          const newWidget = {
            id: Date.now().toString(),
            name: currentTR.value.name,
            url: widgetUrl,
            source: 'market'
          }
          
          console.log('添加新组件:', newWidget)
          
          const addResponse = await axios.post('/api/free/pool', {
            action: 'add',
            widget: newWidget
          })
          
          console.log('添加组件响应:', addResponse)
          ElMessage.success('已添加到自由组件')
        }
        
        // 标记为已应用
        currentTR.value.isAppliedToFree = true
        saveTRList()
      } catch (apiError: any) {
        console.error('API请求错误:', apiError)
        
        // 尝试获取详细错误信息
        let errorMessage = '未知错误'
        if (apiError.response && apiError.response.data) {
          errorMessage = apiError.response.data.message || apiError.response.data.error || '未知错误'
        } else if (apiError.message) {
          errorMessage = apiError.message
        }
        
        ElMessage.error(`应用到自由组件失败: ${errorMessage}`)
      }
    } catch (error) {
      console.error('获取自由组件池失败:', error)
      ElMessage.error('获取自由组件池失败: ' + (error instanceof Error ? error.message : String(error)))
    }
  } catch (error) {
    console.error('应用到自由组件出错:', error)
    ElMessage.error('应用到自由组件出错: ' + (error instanceof Error ? error.message : String(error)))
  }
}

// 刷新预览
const refreshPreview = () => {
  if (!currentTR.value || !currentTR.value.isConfigValid) return
  
  iframeLoaded.value = false
  
  // 使用setTimeout确保iframe重新加载
  setTimeout(() => {
    const iframe = document.querySelector('.iframe-preview iframe') as HTMLIFrameElement
    if (iframe) {
      // 添加时间戳参数，确保刷新
      iframe.src = widgetUrl.value + (widgetUrl.value.includes('?') ? '&' : '?') + 't=' + Date.now()
    }
  }, 100)
}

// 保存TR下载器列表到本地存储和后端
const saveTRList = async () => {
  // 保存到本地存储作为备份
  localStorage.setItem('tr-status-list', JSON.stringify(trList.value))
  
  // 将数组转换为对象，以便与后端API格式匹配
  const configsObject: Record<string, any> = {}
  trList.value.forEach(config => {
    if (config.id) {
      configsObject[config.id] = config
    }
  })
  
  try {
    // 保存到后端
    await axios.post('/api/widgets/tr-status/configs', configsObject)
    console.log('TR配置列表已保存到后端')
  } catch (error) {
    console.error('保存TR配置列表到后端失败:', error)
    ElMessage.error('保存配置到服务器失败，但已保存到本地')
  }
}

// 从本地存储加载TR下载器列表
const loadTRList = async () => {
  try {
    // 首先尝试从后端API获取配置列表
    const response = await axios.get('/api/widgets/tr-status/configs')
    
    if (response.data) {
      // 将对象转换为数组
      const configsArray = Object.values(response.data)
      
      // 迁移旧配置
      trList.value = configsArray.map((item: any) => {
        // 确保displayItems字段符合当前的接口定义
        if (item.displayItems) {
          // 保留当前接口中定义的字段
          item.displayItems = {
            downloadSpeed: item.displayItems.downloadSpeed ?? true,
            uploadSpeed: item.displayItems.uploadSpeed ?? true,
            activeDownloads: item.displayItems.activeDownloads ?? false,
            activeTorrents: item.displayItems.activeTorrents ?? false,
            pausedTorrents: item.displayItems.pausedTorrents ?? false,
            completedTorrents: item.displayItems.completedTorrents ?? false,
            totalTorrents: item.displayItems.totalTorrents ?? false,
            globalRatio: item.displayItems.globalRatio ?? false,
            globalDownloaded: item.displayItems.globalDownloaded ?? false,
            globalUploaded: item.displayItems.globalUploaded ?? false,
            freeSpace: item.displayItems.freeSpace ?? false,
            seedingTorrents: item.displayItems.seedingTorrents ?? false,
            totalSize: item.displayItems.totalSize ?? false,
            averageRatio: item.displayItems.averageRatio ?? false,
            errorTorrents: item.displayItems.errorTorrents ?? false,
            uploadLimit: item.displayItems.uploadLimit ?? false,
            downloadLimit: item.displayItems.downloadLimit ?? false
          }
        }
        
        // 确保应用状态字段存在
        item.isAppliedToFixed = item.isAppliedToFixed ?? false
        item.isAppliedToFree = item.isAppliedToFree ?? false
        
        return item
      })
      
      if (trList.value.length > 0) {
        currentTRIndex.value = 0
        // 设置域名前缀
        if (currentTR.value && currentTR.value.domainPrefix) {
          domainPrefix.value = currentTR.value.domainPrefix
        }
      } else {
        // 如果没有配置，创建一个默认的
        addNewTR()
      }
      
      console.log('从后端API加载了TR配置列表:', trList.value)
      return
    }
  } catch (error) {
    console.error('从后端API加载TR配置列表失败，尝试从本地存储加载:', error)
  }
  
  // 如果从API加载失败，尝试从本地存储加载
  const savedList = localStorage.getItem('tr-status-list')
  if (savedList) {
    try {
      // 解析保存的列表
      const parsedList = JSON.parse(savedList)
      
      // 迁移旧配置
      trList.value = parsedList.map((item: any) => {
        // 确保displayItems字段符合当前的接口定义
        if (item.displayItems) {
          // 保留当前接口中定义的字段
          item.displayItems = {
            downloadSpeed: item.displayItems.downloadSpeed ?? true,
            uploadSpeed: item.displayItems.uploadSpeed ?? true,
            activeDownloads: item.displayItems.activeDownloads ?? false,
            activeTorrents: item.displayItems.activeTorrents ?? false,
            pausedTorrents: item.displayItems.pausedTorrents ?? false,
            completedTorrents: item.displayItems.completedTorrents ?? false,
            totalTorrents: item.displayItems.totalTorrents ?? false,
            globalRatio: item.displayItems.globalRatio ?? false,
            globalDownloaded: item.displayItems.globalDownloaded ?? false,
            globalUploaded: item.displayItems.globalUploaded ?? false,
            freeSpace: item.displayItems.freeSpace ?? false,
            seedingTorrents: item.displayItems.seedingTorrents ?? false,
            totalSize: item.displayItems.totalSize ?? false,
            averageRatio: item.displayItems.averageRatio ?? false,
            errorTorrents: item.displayItems.errorTorrents ?? false,
            uploadLimit: item.displayItems.uploadLimit ?? false,
            downloadLimit: item.displayItems.downloadLimit ?? false
          }
        }
        
        // 确保应用状态字段存在
        item.isAppliedToFixed = item.isAppliedToFixed ?? false
        item.isAppliedToFree = item.isAppliedToFree ?? false
        
        return item
      })
      
      if (trList.value.length > 0) {
        currentTRIndex.value = 0
        // 设置域名前缀
        if (currentTR.value && currentTR.value.domainPrefix) {
          domainPrefix.value = currentTR.value.domainPrefix
        }
      } else {
        // 如果没有配置，创建一个默认的
        addNewTR()
      }
      
      console.log('从本地存储加载了TR配置列表:', trList.value)
    } catch (error) {
      console.error('解析本地存储的TR配置列表失败:', error)
      // 创建一个默认配置
      addNewTR()
    }
  } else {
    // 如果没有保存的列表，创建一个默认配置
    addNewTR()
  }
}

// 添加新函数：强制应用尺寸
const forceApplySize = () => {
  // 直接设置iframe尺寸
  const iframe = document.querySelector('.iframe-preview iframe') as HTMLIFrameElement | null
  if (iframe) {
    console.log('直接应用尺寸', componentSizeSettings.value)
    iframe.style.width = `${componentSizeSettings.value.width}px`
    iframe.style.height = `${componentSizeSettings.value.height}px`
    
    // 发送消息到iframe通知尺寸变化
    if (iframe.contentWindow) {
      try {
        iframe.contentWindow.postMessage({
          type: 'resize',
          width: componentSizeSettings.value.width,
          height: componentSizeSettings.value.height
        }, '*')
      } catch (e) {
        console.error('无法向iframe发送消息', e)
      }
    }
  }
}

// 组件挂载时加载配置
onMounted(() => {
  loadTRList()
})
</script>

<style scoped lang="scss">
.tr-status-detail {
  padding: 24px;
  width: 100%;
  max-width: 1400px;
  margin: 0 auto;
  background-color: #fff;
  border-radius: 12px;
  box-sizing: border-box;
  
  .header-section {
    display: flex;
    justify-content: space-between;
    align-items: flex-start;
    margin-bottom: 24px;
    
    .title-area {
      h2 {
        margin: 0 0 8px;
        font-size: 24px;
        font-weight: 600;
        color: var(--el-color-primary);
      }
      
      .description {
        color: var(--el-text-color-secondary);
        margin: 0;
      }
    }
    
    .actions {
      display: flex;
      gap: 12px;
    }
  }
}

.main-content {
  display: grid;
  grid-template-columns: minmax(250px, 280px) 1fr;
  gap: 24px;
  margin-bottom: 24px;
  
  @media (max-width: 1200px) {
    grid-template-columns: 1fr;
  }
}

.right-section {
  display: flex;
  flex-direction: column;
  gap: 24px;
}

.section-title {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 0;
  font-weight: 600;
  font-size: 16px;
}

.tr-list-section {
  border-radius: 8px;
  overflow: hidden;
  
  :deep(.el-card__header) {
    padding: 12px 16px;
    border-top-left-radius: 8px;
    border-top-right-radius: 8px;
  }
  
  :deep(.el-card__body) {
    padding: 0;
    max-height: 500px;
    overflow-y: auto;
    border-bottom-left-radius: 8px;
    border-bottom-right-radius: 8px;
  }
  
  .tr-list {
    .tr-item {
      display: flex;
      justify-content: space-between;
      align-items: center;
      padding: 12px 16px;
      border-bottom: 1px solid var(--el-border-color-lighter);
      cursor: pointer;
      transition: all 0.2s;
      
      &:last-child {
        border-bottom: none;
      }
      
      &:hover {
        background-color: var(--el-color-primary-light-9);
      }
      
      &.active {
        background-color: var(--el-color-primary-light-8);
        border-left: 3px solid var(--el-color-primary);
      }
      
      .tr-item-content {
        display: flex;
        align-items: center;
        flex: 1;
      }
      
      .tr-item-name {
        font-weight: 500;
        flex: 1;
        margin-right: 8px;
        word-break: break-word;
      }
      
      .tr-item-status {
        font-size: 12px;
        padding: 2px 6px;
        border-radius: 10px;
        background-color: var(--el-color-danger-light-9);
        color: var(--el-color-danger);
        
        &.valid {
          background-color: var(--el-color-success-light-9);
          color: var(--el-color-success);
        }
      }
    }
    
    .no-tr {
      padding: 40px 0;
    }
  }
}

.config-preview-tabs {
  border-radius: 8px;
  overflow: hidden;
  
  :deep(.el-tabs__header) {
    margin-bottom: 0;
    border-top-left-radius: 8px;
    border-top-right-radius: 8px;
  }
  
  :deep(.el-tabs__content) {
    padding: 16px;
    border-bottom-left-radius: 8px;
    border-bottom-right-radius: 8px;
  }
  
  .preview-header {
    display: flex;
    flex-direction: column;
    gap: 12px;
    margin-bottom: 16px;
    
    .preview-tips {
      :deep(.el-alert) {
        border-radius: 6px;
        
        p {
          margin: 0;
          font-size: 12px;
        }
      }
    }
    
    .el-button {
      align-self: flex-end;
    }
  }
}

.params-content, .preview-content {
  min-height: 300px;
  
  .no-tr-selected, .no-preview {
    height: 200px;
    display: flex;
    justify-content: center;
    align-items: center;
  }
}

.domain-prefix-section {
  border-radius: 8px;
  overflow: hidden;
  
  :deep(.el-card__header) {
    padding: 12px 16px;
    border-top-left-radius: 8px;
    border-top-right-radius: 8px;
  }
  
  :deep(.el-card__body) {
    padding: 16px;
    border-bottom-left-radius: 8px;
    border-bottom-right-radius: 8px;
  }
  
  .domain-prefix-content {
    .el-form-item {
      margin-bottom: 0;
    }
    
    .form-tip {
      font-size: 12px;
      color: var(--el-text-color-secondary);
      margin-top: 4px;
    }
  }
}

.iframe-preview {
  position: relative;
  width: 100%;
  max-width: 100%;
  height: 300px;
  border: 1px solid var(--el-border-color-light);
  border-radius: 8px;
  overflow: hidden;
  margin: 0 auto;
  
  .gradient-bg {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: linear-gradient(135deg, #1a1a2e, #16213e, #0f3460);
    background-size: 400% 400%;
    animation: gradient-animation 15s ease infinite;
    z-index: 0;
    pointer-events: none; /* 确保背景不会阻止iframe交互 */
  }
  
  iframe {
    position: relative;
    z-index: 1;
    background: transparent !important; /* 强制透明背景 */
    width: 100%;
    height: 100%;
    border-radius: 8px;
  }
  
  .iframe-loading {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    background-color: rgba(26, 26, 46, 0.8);
    color: white;
    z-index: 10;
    border-radius: 8px;
    
    .el-icon {
      font-size: 24px;
      margin-bottom: 8px;
    }
  }
}

@keyframes gradient-animation {
  0% {
    background-position: 0% 50%;
  }
  50% {
    background-position: 100% 50%;
  }
  100% {
    background-position: 0% 50%;
  }
}

/* 支持作者样式 */
.support-author {
  margin: 0 0 20px;
  text-align: center;
  font-size: 14px;
  background: linear-gradient(to right, rgba(245, 108, 108, 0.05), rgba(245, 108, 108, 0.1), rgba(245, 108, 108, 0.05));
  padding: 10px 16px;
  border-radius: 8px;
  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.05);
  transition: all 0.3s ease;
  
  &:hover {
    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
  }
  
  .support-text {
    color: #606266;
    
    .highlight {
      color: #F56C6C;
      font-weight: 500;
      margin-left: 4px;
    }
  }
}
</style> 